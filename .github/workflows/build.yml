name: Build OpenWrt Package

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  OPENWRT_VERSION: v24.10.3
  PACKAGE_NAME: luci-app-tailscale-community

jobs:
  # 任务一: 编译并缓存工具链
  build_toolchain:
    name: Build toolchain for ${{ matrix.target.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: x86_64
            target: x86
            subtarget: 64
            profile: generic
          - name: armv8_cortex-a53
            target: armvirt
            subtarget: 64
            profile: generic
          - name: mips_mt7621
            target: ramips
            subtarget: mt7621
            profile: default
    
    # 定义工具链缓存
    steps:
      - name: Cache OpenWrt toolchain
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: openwrt
          # 缓存键：与操作系统、OpenWrt版本和目标架构绑定
          key: ${{ runner.os }}-openwrt-toolchain-${{ env.OPENWRT_VERSION }}-${{ matrix.target.name }}

      - name: Install dependencies
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-setuptools rsync unzip zlib1g-dev file wget

      - name: Clone OpenWrt source
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: git clone https://github.com/openwrt/openwrt.git --depth 1 --branch ${{ env.OPENWRT_VERSION }} openwrt

      - name: Prepare toolchain environment
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          # 创建一个最小化的.config，仅用于编译工具链
          cat <<EOF > .config
          CONFIG_TARGET_${{ matrix.target.target }}=y
          CONFIG_TARGET_${{ matrix.target.target }}_${{ matrix.target.subtarget }}=y
          CONFIG_TARGET_${{ matrix.target.target }}_${{ matrix.target.subtarget }}_DEVICE_${{ matrix.target.profile }}=y
          EOF
          make defconfig
          make download -j$(nproc)

      - name: Compile toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        working-directory: ./openwrt
        run: |
          make toolchain/install -j$(nproc) V=s
          make tools/install -j$(nproc) V=s

  # 任务二: 在已缓存的工具链基础上编译软件包
  build_package:
    name: Build package for ${{ matrix.target.name }}
    runs-on: ubuntu-latest
    # 依赖于工具链任务成功完成
    needs: build_toolchain
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: x86_64
            target: x86
            subtarget: 64
            profile: generic
          - name: armv8_cortex-a53
            target: armvirt
            subtarget: 64
            profile: generic
          - name: mips_mt7621
            target: ramips
            subtarget: mt7621
            profile: default

    steps:
      - name: Restore OpenWrt toolchain from cache
        uses: actions/cache@v4
        with:
          path: openwrt
          key: ${{ runner.os }}-openwrt-toolchain-${{ env.OPENWRT_VERSION }}-${{ matrix.target.name }}
          # 如果缓存未找到，则任务失败，因为工具链是必需的
          fail-on-cache-miss: true

      - name: Checkout package repository
        uses: actions/checkout@v4

      - name: Prepare package build config
        working-directory: ./openwrt
        run: |
          # 复制你的软件包源码
          cp -r ../${{ env.PACKAGE_NAME }} ./package/
          # 创建包含你的软件包的.config
          cat <<EOF > .config
          CONFIG_TARGET_${{ matrix.target.target }}=y
          CONFIG_TARGET_${{ matrix.target.target }}_${{ matrix.target.subtarget }}=y
          CONFIG_TARGET_${{ matrix.target.target }}_${{ matrix.target.subtarget }}_DEVICE_${{ matrix.target.profile }}=y
          CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=m
          EOF
          make defconfig

      - name: Compile the package
        working-directory: ./openwrt
        run: make package/${{ env.PACKAGE_NAME }}/compile -j$(nproc) V=s

      - name: Find and prepare .ipk file
        id: find_ipk
        working-directory: ./openwrt
        run: |
          ipk_path=$(find ./bin/packages -name "${{ env.PACKAGE_NAME }}*.ipk" | head -n 1)
          if [ -z "$ipk_path" ]; then
            echo "::error::IPK file not found!"
            exit 1
          fi
          echo "Found IPK: $ipk_path"
          echo "path=$ipk_path" >> $GITHUB_OUTPUT

      - name: Upload .ipk artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.target.name }}
          path: openwrt/${{ steps.find_ipk.outputs.path }}
          if-no-files-found: error

  # 所有构建成功后发表评论
  comment-on-commit:
    name: Comment on commit
    runs-on: ubuntu-latest
    # 依赖于所有软件包编译任务成功完成
    needs: build_package
    if: success()
    steps:
      - name: Post comment
        uses: peter-evans/commit-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ✅ **${{ env.PACKAGE_NAME }}** build successful for all targets!

            Download compiled `.ipk` packages from the artifacts section below (login required):

            [**View Action Run and Download Artifacts**](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})