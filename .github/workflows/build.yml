name: Build LuCI App

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  OPENWRT_VERSION: v24.10.3
  CURRENT_PACKAGE: luci-app-tailscale-community

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - name: x86_64
            target: x86
            subtarget: 64
            profile: generic
          - name: armv8_cortex-a53
            target: armvirt
            subtarget: 64
            profile: generic
          - name: mips_mt7621
            target: ramips
            subtarget: mt7621
            profile: default

    name: Build for ${{ matrix.target.name }}

    steps:
      # 步骤 1: 安装 OpenWrt 编译所需的依赖
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-setuptools rsync unzip zlib1g-dev file wget

      # 步骤 2: 检出你的插件仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 3: 缓存 OpenWrt 源码和 feeds
      - name: Cache OpenWrt build environment
        id: cache-openwrt
        uses: actions/cache@v4
        with:
          path: openwrt
          key: ${{ runner.os }}-openwrt-${{ env.OPENWRT_VERSION }}-${{ matrix.target.name }}-${{ hashFiles('openwrt/.config') }}
          restore-keys: |
            ${{ runner.os }}-openwrt-${{ env.OPENWRT_VERSION }}-${{ matrix.target.name }}-

      # 步骤 4: 克隆 OpenWrt 官方源码 (如果缓存未命中)
      - name: Clone OpenWrt source
        if: steps.cache-openwrt.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/openwrt/openwrt.git --depth 1 --branch ${{ env.OPENWRT_VERSION }} openwrt
          
      # 步骤 5: 准备编译环境 (如果缓存未命中)
      - name: Prepare build environment
        if: steps.cache-openwrt.outputs.cache-hit != 'true'
        working-directory: ./openwrt
        run: |
          # 更新并安装 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 步骤 6: 复制插件并生成编译配置
      - name: Copy plugin and generate build config
        working-directory: ./openwrt
        run: |
          # 将当前仓库中的目录复制到 openwrt 的 package 目录下
          cp -r ../${{ env.CURRENT_PACKAGE }} ./package/
          
          # 创建自定义 .config 文件
          cat <<EOF > .config
          # 编译目标架构
          CONFIG_TARGET_${{ matrix.target.target }}=y
          CONFIG_TARGET_${{ matrix.target.target }}_${{ matrix.target.subtarget }}=y
          CONFIG_TARGET_${{ matrix.target.target }}_${{ matrix.target.subtarget }}_DEVICE_${{ matrix.target.profile }}=y

          # 选中我们的插件包 (m = 编译成 ipk)
          CONFIG_PACKAGE_${{ env.CURRENT_PACKAGE }}=m

          # 选中依赖包
          CONFIG_PACKAGE_tailscale=m
          EOF
          
          # 应用默认配置
          make defconfig

      # 步骤 7: 编译你的插件包
      - name: Compile the package
        working-directory: ./openwrt
        run: |
          # 下载所有依赖包的源码
          make download -j$(nproc)

          # 编译工具链和主机工具
          make toolchain/install -j$(nproc) V=s
          make tools/install -j$(nproc) V=s

          # 最后编译你的软件包
          make package/${{ env.CURRENT_PACKAGE }}/compile -j$(nproc) V=s

      # 步骤 8: 查找并准备上传 .ipk 文件
      - name: Find .ipk package
        id: find_ipk
        working-directory: ./openwrt
        run: |
          # 在输出目录中查找 .ipk 文件
          ipk_path=$(find ./bin/packages -name "${{ env.CURRENT_PACKAGE }}*.ipk" | head -n 1)
          if [ -z "$ipk_path" ]; then
            echo "::error::IPK file not found!"
            exit 1
          fi
          echo "Found IPK: $ipk_path"
          # 将路径设置为下一步的输出变量
          echo "path=$ipk_path" >> $GITHUB_OUTPUT

      # 步骤 9: 上传 .ipk 文件作为构建产物 (Artifact)
      - name: Upload .ipk artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CURRENT_PACKAGE }}-${{ matrix.target.name }}
          path: openwrt/${{ steps.find_ipk.outputs.path }}
          if-no-files-found: error

  # 步骤 10: 在所有构建任务成功后，在 Commit 上发表一条统一的评论
  comment-on-commit:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: Comment on commit
        uses: peter-evans/commit-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ✅ **${{ env.CURRENT_PACKAGE }}** build successful for all targets!

            You can download the compiled `.ipk` packages from the artifacts section of the link below (login required):

            [**View Action Run and Download Artifacts**](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})