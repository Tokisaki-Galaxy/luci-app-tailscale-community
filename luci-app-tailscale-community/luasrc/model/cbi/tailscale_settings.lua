local util = require "luci.util"
local sys = require "luci.sys"
local fs = require "luci.fs"
local data_loader = require "luci.model.tailscale_data"

-- 加载所有数据
local data = data_loader.load()

m = Map("tailscale", "Tailscale")
m:chain("luci")

-- 只有在成功解析了设置后，才显示设置表单
if data._profile_detail_data_raw then
    s_set = m:section(TypedSection, "settings", _("Node Settings"),
        _("These settings are applied instantly using the <code>tailscale set</code> command and do not require a service restart."))
    s_set.anonymous = true

    o = s_set:option(Flag, "accept_routes", _("Accept Routes")); o.default = data.settings.accept_routes and "1" or "0"; o.rmempty = false
    o = s_set:option(Flag, "advertise_exit_node", _("Advertise as Exit Node")); o.default = data.settings.advertise_exit_node and "1" or "0"; o.rmempty = false
    o = s_set:option(Value, "advertise_routes", _("Advertise Routes")); o.default = data.settings.advertise_routes; o.rmempty = true
    o = s_set:option(Value, "exit_node", _("Use Exit Node")); o.default = data.settings.exit_node; o.rmempty = true
    o = s_set:option(Flag, "exit_node_allow_lan_access", _("Allow LAN Access via Exit Node")); o.default = data.settings.exit_node_allow_lan_access and "1" or "0"; o.rmempty = false
    o = s_set:option(Flag, "snat_subnet_routes", _("Enable SNAT for Subnet Routes")); o.default = data.settings.snat_subnet_routes and "1" or "0"; o.rmempty = false
    o = s_set:option(Flag, "ssh", _("Enable SSH Server")); o.default = data.settings.ssh and "1" or "0"; o.rmempty = false
    o = s_set:option(Flag, "shields_up", _("Shields Up Mode")); o.default = data.settings.shields_up and "1" or "0"; o.rmempty = false
    o = s_set:option(Flag, "auto_update", _("Enable Auto-Updates")); o.default = data.settings.auto_update and "1" or "0"; o.rmempty = false
    o = s_set:option(Value, "hostname", _("Custom Hostname")); o.default = data.settings.hostname; o.rmempty = true
else
    s_err = m:section(TypedSection, "error", _("Settings Unavailable"))
    s_err.anonymous = true
    s_err.description = _("Node settings cannot be loaded. Please ensure Tailscale is running and properly configured.")
end

s_daemon = m:section(TypedSection, "daemon", _("Daemon Environment Settings"),
    _("Changing these settings requires a <strong>service restart</strong> to take effect. This works by creating a script in <code>/etc/profile.d/</code> to set environment variables for the daemon."))
s_daemon.anonymous = true

o = s_daemon:option(Value, "mtu", _("Set Custom MTU"), _("Leave empty for default. A common value for problematic networks is 1280."))
o.datatype = "uinteger"; o.placeholder = "1280"; o.default = data.daemon_settings.mtu

o = s_daemon:option(Flag, "reduce_memory", _("Reduce Memory Usage"), _("Optimizes for lower memory consumption at the cost of higher CPU usage. Sets <code>GOCG=10</code> environment variable."))
o.default = data.daemon_settings.reduce_memory and "1" or "0"; o.rmempty = false

local function update_env_script(form_data)
    local mtu = form_data.mtu
    local reduce_mem = form_data.reduce_memory == "1"
    local script_path = "/etc/profile.d/tailscale-env.sh"
    
    if (not mtu or mtu == "") and not reduce_mem then
        fs.remove(script_path)
        return
    end
    
    local content = { "#!/bin/sh", "", "# This file is auto-generated by luci-app-tailscale. Do not edit manually." }
    if reduce_mem then table.insert(content, "export GOGC=10") end
    if mtu and mtu ~= "" then table.insert(content, string.format("export TS_DEBUG_MTU=%s", mtu)) end
    
    fs.writefile(script_path, table.concat(content, "\n") .. "\n")
    sys.call("chmod +x " .. script_path)
end

function m.on_after_commit(self)
    local form = self:formvalue_readall()
    local node_settings_changed, daemon_settings_changed = false, false

    if (form.mtu or data.daemon_settings.mtu) and form.mtu ~= data.daemon_settings.mtu then daemon_settings_changed = true end
    if (form.reduce_memory == "1") ~= data.daemon_settings.reduce_memory then daemon_settings_changed = true end
    
    if data._profile_detail_data_raw then
        for _, flag in ipairs({"accept_routes", "advertise_exit_node", "exit_node_allow_lan_access", "snat_subnet_routes", "ssh", "shields_up", "auto_update"}) do
            if (form[flag] == "1") ~= data.settings[flag] then node_settings_changed = true; break end
        end
        if not node_settings_changed then
            for _, val in ipairs({"advertise_routes", "exit_node", "hostname"}) do
                if (form[val] or data.settings[val]) and form[val] ~= data.settings[val] then node_settings_changed = true; break end
            end
        end
    end

    if daemon_settings_changed then
        update_env_script(form)
        m.message = _("Daemon settings changed. Restarting Tailscale service...")
        sys.call("/etc/init.d/tailscale restart >/dev/null 2>&1 &")
    elseif node_settings_changed then
        local args = {}
        local function add_arg(k, v, is_bool) if is_bool then table.insert(args, util.format("--%s=%s", k, v and "true" or "false")) else table.insert(args, util.format("--%s=\"%s\"", k, v or "")) end end
        add_arg("accept-routes", form.accept_routes == "1", true); add_arg("advertise-exit-node", form.advertise_exit_node == "1", true); add_arg("exit-node-allow-lan-access", form.exit_node_allow_lan_access == "1", true); add_arg("snat-subnet-routes", form.snat_subnet_routes == "1", true); add_arg("ssh", form.ssh == "1", true); add_arg("shields-up", form.shields_up == "1", true); add_arg("auto-update", form.auto_update == "1", true); add_arg("advertise-routes", form.advertise_routes, false); add_arg("exit-node", form.exit_node, false); add_arg("hostname", form.hostname, false)
        sys.call("tailscale set " .. table.concat(args, " ") .. " >/dev/null 2>&1")
        sys.call("sleep 1")
        m.message = _("Node settings applied.")
    end
end

return m